* interface tweaks
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (add-to-list 'default-frame-alist '(font . "Source Code Pro-14"))
#+END_SRC

* try
#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

* Org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode))
#+END_SRC

* indo, ido mode
#+BEGIN_SRC emacs-lisp
(setq indo-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC

* buffer
#+BEGIN_SRC emacs-lisp
(defalias 'list-buffers 'ibuffer)
#+END_SRC
* window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    ))
#+END_SRC

* search
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  )
(use-package swiper
  :ensure t
  :config
  (progn
   (ivy-mode 1)
   (setq ivy-use-virtual-buffers t)
   (setq enable-recursive-minibuffers t)
   ;; enable this if you want `swiper' to use it
   ;; (setq search-default-mode #'char-fold-to-regexp)
   (global-set-key "\C-s" 'swiper)
   ;;;(global-set-key (kbd "C-c C-r") 'ivy-resume)
   ;;(global-set-key (kbd "<f6>") 'ivy-resume)
   (global-set-key (kbd "M-x") 'counsel-M-x)
   (global-set-key (kbd "C-x C-f") 'counsel-find-file)
   ;;(global-set-key (kbd "<f1> f") 'counsel-describe-function)
   ;;(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
   ;;(global-set-key (kbd "<f1> l") 'counsel-find-library)
   ;;(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
   ;;(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
   ;;(global-set-key (kbd "C-c g") 'counsel-git)
   ;;(global-set-key (kbd "C-c j") 'counsel-git-grep)
   ;;(global-set-key (kbd "C-c k") 'counsel-ag)
   ;;(global-set-key (kbd "C-x l") 'counsel-locate)
   ;;(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
   ;;(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
   ))
(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))
#+END_SRC

* auto complete
#+BEGIN_SRC emacs-lisp
(use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    ))
#+END_SRC

* theme
#+BEGIN_SRC emacs-lisp
(use-package color-theme-sanityinc-tomorrow
  :ensure t)
(load-theme 'sanityinc-tomorrow-night t)
#+END_SRC

* undo tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+END_SRC

#+RESULTS:
* misc
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode t)
#+END_SRC
